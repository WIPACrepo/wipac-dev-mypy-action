name: 'WIPAC Dev Mypy'
description: 'GitHub Action Package for Running Mypy'

# inputs:
#   who-to-greet:  # id of input
#     description: 'Who to greet'
#     required: true
#     default: 'World'

# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:

    - run: pip install --upgrade pip
      shell: bash

    - run: pip install mypy
      shell: bash

    - name: pip install dependencies
      run: |
        #
        # PACKAGE -> pip install (try 'mypy' extra first)
        if [ -e "setup.py" ]; then
          echo "installing dependencies from setup.py..."
          pip install .[mypy]  # okay if 'mypy' extra doesn't exist (it'll just install .)
        #
        # SCRIPT -> install all requirements*.txt files
        elif [ -n "$(find . -name 'requirements*.txt' | head -1)" ]; then
          # ex: pip install -r requirements.txt requirements-dev.txt foo/requirements.txt
          echo "installing dependencies from requirements*.txt files..."
          pip install $(find . -name 'requirements*.txt' | rev | sed -z 's/\n/ r- /g' | rev)
        #
        # ERROR
        else
          echo "could not install dependencies -- did not find setup.py or requirements*.txt file(s)"
          exit 2
        fi
      shell: bash

    - name: run mypy (and try to install type-packages)
      run: |
        flags="--namespace-packages --exclude build/"
        it_flags="--install-types --non-interactive"

        # do mypy (may fail the first time if missing 3rd party packages, second time uses mypy cache for 3rd party packages)
        (mypy $it_flags $flags -v . 2> stderr.txt) || (mypy $flags -v . 2> stderr.txt)

        # show which files were looked at (-v must be used to produce file names)
        grep "Found source" stderr.txt | sed "s_.*path='\(.*\)py'.*_\1py_"
      shell: bash
